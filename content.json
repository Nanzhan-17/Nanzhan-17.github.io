{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/03/08/hello-world/"},{"title":"hhh","text":"是我还是hi i我是","link":"/2022/03/08/hhh/"},{"title":"","text":"计算机网络实验 Labexercise1-1 Protocol Layers（Wireshark抓包与协议分析实验） 前言：本博客包含Windows10下安装wget、Wireshark。一些有用的链接： Labexercise1-1 Protocol Layers翻译 wireshark练习及答案lab-protocol-layers.docx Wireshark抓包使用指南 山东大学计算机网络实验 一些有用的提示：开始实验进行抓包时，校园网环境下的同学不建议使用一些 [ 上网不涉密涉密不上网 ] 的校园网进行抓包，可能会导致抓不到包捏 :)（找了半天bug，气死我了） 1. 下载安装wget参考资料：wget for windows 下载与安装 点击此链接，选择合适的版本下载.exe文件，然后把下好的.exe文件放在C:/windows/system32目录下即可。 在cmd终端输入wget --version，显示如下，则安装成功: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849C:\\Users\\hp\\Desktop&gt;wget --versionGNU Wget 1.21.2 built on mingw32.+cares +digest +gpgme +https +ipv6 +iri +large-file +metalink -nls+ntlm +opie +psl +ssl/opensslWgetrc: /win32dev/misc/wget/out64/etc/wgetrc (system)Compile: x86_64-w64-mingw32-gcc -DHAVE_CONFIG_H -DSYSTEM_WGETRC=&quot;/win32dev/misc/wget/out64/etc/wgetrc&quot; -DLOCALEDIR=&quot;/win32dev/misc/wget/out64/share/locale&quot; -I. -I../../src -I../lib -I../../lib -I/win32dev/misc/wget/out64/include -I/win32dev/misc/wget/out64/include -I/win32dev/misc/wget/out64/include -I/win32dev/misc/wget/out64/include -DCARES_STATICLIB -I/win32dev/misc/wget/out64/include -DPCRE2_STATIC -I/win32dev/misc/wget/out64/include -DHAVE_LIBSSL -I/win32dev/misc/wget/out64/include -I/win32dev/misc/wget/out64/include -DNDEBUG -ggdbLink: x86_64-w64-mingw32-gcc -I/win32dev/misc/wget/out64/include -I/win32dev/misc/wget/out64/include -I/win32dev/misc/wget/out64/include -DCARES_STATICLIB -I/win32dev/misc/wget/out64/include -DPCRE2_STATIC -I/win32dev/misc/wget/out64/include -DHAVE_LIBSSL -I/win32dev/misc/wget/out64/include -I/win32dev/misc/wget/out64/include -DNDEBUG -ggdb -L/win32dev/misc/wget/out64/lib -L/win32dev/misc/wget/out64/lib -lmetalink -lunistring -liconv -L/win32dev/misc/wget/out64/lib -lcares -L/win32dev/misc/wget/out64/lib -lpcre2-8 -L/win32dev/misc/wget/out64/lib -lssl -lcrypto -L/win32dev/misc/wget/out64/lib -lz -L/win32dev/misc/wget/out64/lib -lpsl -lidn2 -lunistring -liconv -lws2_32 -lole32 -lcrypt32 -lexpat -L/win32dev/misc/wget/out64/lib -lgpgme -lassuan -lgpg-error ftp-opie.o mswindows.o openssl.o http-ntlm.o ../lib/libgnu.a -lws2_32 -lws2_32 -lws2_32 -lws2_32 -lws2_32 -lws2_32 /win32dev/misc/wget/out64/lib/libiconv.a /win32dev/misc/wget/out64/lib/libunistring.a -lws2_32Copyright (C) 2015 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later&lt;http://www.gnu.org/licenses/gpl.html&gt;.This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Originally written by Hrvoje Niksic &lt;hniksic@xemacs.org&gt;.Please send bug reports and questions to &lt;bug-wget@gnu.org&gt;. 尝试使用wget时，可以在终端输入wget 网址把目标链接下载到当前目录下，也可以输入wegt -p 指定目录 网址把目标链接下载到指定目录下。 2. 下载安装Wireshark参考资料：win10安装抓包工具wireshark 在Wireshark的官网下载地址中，在Stable Release中选择符合你计算机型号的安装包，我Windows10 64位电脑选择的是 Windows Installer (64-bit)，双击下载的.exe文件进行安装。 如果你仅仅只是为了完成课程实验，在安装的过程当中可以一路无脑next，在选择安装路径时可以更改为你想要的路径。 3.开始实验Step 1-3打开Wireshark，界面如下图所示，选择WLAN，点击捕获-选项。 在捕获选项界面，仅勾选WLAN，取消其他接口的混杂，在下方绿色的部分输入tcp port 80，使用“tcp端口80”筛选器启动捕获。 打开cmd终端，抓包一个网站，这里选择的是https://www.baidu.com/，网页获取完成后，立刻在Wireshark点击左上角的停止（红色正方形），显示如下图。 找到上方Protocol为HTTP，且Info是GET的，点击蓝色部分的Hypertext，可以看到整个窗口的最下方显示415 byte(s)，这是HTTP的实际有效开销。 接下来分别查看以太网（Ethernet）、IP、TCP占用的字节，分别如下为14 types、20 types、20 types。 由此，可以回答实验报告中的第一个 turn in：Step 3: Packet StructureTurn-in: Hand in your packet drawing. Step 4Protocol Overhead指的是协议开销，由于协议本身的报头等内容也需要占用一定的空间，用来标识该种协议、报文内各个字段的含义等信息，这种内容就是协议开销了。下载的包从一个Info中带有SYN，ACK信号的包开始，到下面第一个遇到的HTTP包后面的TCP包为止。 由此，可以回答实验报告中的第二个 turn in：Your estimate of download protocol overhead as defined above. Tell us whether you find this overhead to be significant.协议开销一共有 66+54+469+66=665字节HTTP有效开销一共有415字节，415/665≈62.41%，协议开销占比较小。 Step 5点击中间那一栏的以太网和IP，分别可以从Type和Protocol中找到第五步问题的答案。 由此，可以回答实验报告中的第三个 turn in： Which Ethernet header field is the demultiplexing key that tells it the next higher layer is IP? What value is used in this field to indicate “IP”?以太网报头字段是Type，对应的值是0x0800。 Which IP header field is the demultiplexing key that tells it the next higher layer is TCP? What value is used in this field to indicate “TCP”?IP报头字段是Protocol，对应的值是6。","link":"/2022/03/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%20Labexercise1-1%20Protocol%20Layers/"},{"title":"hjh","text":"晒","link":"/2022/03/08/hjh/"},{"title":"","text":"Windows10 和 VSCode 上Haskell的安装与环境搭建 参考资料：【VS Code】Windows10下VS Code配置Haskell语言环境在整体的环境安装配置过程中，多处涉及到github链接和需要翻墙的链接，部分校园网可能会链接失败，可以尝试手机热点。 1. 下载安装Stack打开Stack官方文档，选择Windows 64-bit Installer进行下载，双击下载下来的exe文件进行安装，可以自定义C盘路径，但是要以管理员身份运行。 安装过程中，还会自动将Stack添加到用户环境变量 PATH 中，同时会设置 STACK_ROOT=C:\\sr（安装程序的默认选项，记住这个路径，后面要考），安装完成后，可以在cmd终端输入命令“stack –help”来检验安装是否成功。 2. 安装GHC（麻烦bug多）Stack可以用于管理Haskell编译器GHC和Haskell库，因此使用Stack安装GHC。 由于Haskell的生态和版本支持不是很好，如果你直接安装而不固定版本号，软件包的安装就容易引起冲突，导致各种依赖项间的不兼容。访问这个网站，查看Haskell最新的LTS，然后锁定在这个LTS上，此处我选择的是最新的LTS 18.27。 一些辅助理解的概念（和配置环境关系不大，你可以不看）： Hackage是Haskell社区的开源软件包仓库 The Haskell Package Repository ，可以发布库和程序，或者使用Cabal-install这样的软件包管理器下载和安装软件包。 Stackage是 Stable Haskell package sets 的缩写，即稳定一致的Haskell包集合。它是一个Haskell软件包子集的发行版，来自Hackage并和它一同被社区构建起来。Stackage存在的意义在于，它提供了兼容一致且稳定的Haskell包集，每个包都选择了一个特定版本以满足软件包集合的自洽性，从而解决包版本的冲突问题、顺利构建和运行项目。 Stackage提供和维护了一堆不同的大版本，每个大版本都对应一个兼容一致稳定的Haskell包集，或者说是一个LTS Long Term Service ，被社区长期支持。我们选定了一个LTS之后，在下载安装时只可能发生某个包不存在的情况，就算出现冲突也能通过Stack来轻松解决，不会埋下一大堆“地雷”。 2.1 配置stack在cmd终端执行stack install，会发现下载经常失败。 1(ConnectionFailure user error (Network.Socket.gai_strerror not supported: 11004)) 这是因为下载过程中的一个网址需要翻墙才能访问，在不翻墙的情况下，需要进行换源才可以下载成功。 参考资料：关于stack换源的问题 其中提到了两个清华源的网址，“可以同时使用 TUNA 的 Stackage 源 + Hackage 源来解决”，分别是stackage 镜像使用帮助和hackage 镜像使用帮助。 在stackage 镜像使用帮助中提到“本镜像推荐与 TUNA 的 Hackage 镜像配合使用”，因此两个镜像源都需要添加。 2.2 换源：在终端输入stack --version查看stack版本，然后在上述两个源链接中分别找到对应版本的源进行更换，我的stack版本是2.7.3，在这里说明我的换源过程： （1）下载 stackage 镜像中提示的文件： 下载图片下方蓝色链接的global-hints.yaml文件，在系统中找到对应的文件夹，不同下载路径对应的文件夹不同，此处的路径就是上文提及的记下来要考的路径： 默认路径下载时，直接在c盘路径输入%APPDATA%，然后回车就可以打开对应文件夹。 我下载的时候更改了默认路径，所以要修改的配置文件是%STACK_ROOT%\\config.yaml，配置文件对应的路径是上面记住要考的哪个C:\\sr\\config.yaml。 （2）更换源现在你已经找到了对应的目录，在此目录下的pantry文件夹内放入刚刚下载好的global-hints.yaml文件，并更改 stack（默认路径）或sr（我更改的路径）目录下的config.yaml，在此文件中增添两个镜像源中对应版本的代码，我的版本是2.7.3： 即在config.yaml中增加以下代码： 123456789101112131415161718192021222324package-indices: - download-prefix: http://mirrors.tuna.tsinghua.edu.cn/hackage/ hackage-security: keyids: - 0a5c7ea47cd1b15f01f5f51a33adda7e655bc0f0b0615baa8e271f4c3351e21d - 1ea9ba32c526d1cc91ab5e5bd364ec5e9e8cb67179a471872f6e26f0ae773d42 - 280b10153a522681163658cb49f632cde3f38d768b736ddbc901d99a1a772833 - 2a96b1889dc221c17296fcc2bb34b908ca9734376f0f361660200935916ef201 - 2c6c3627bd6c982990239487f1abd02e08a02e6cf16edb105a8012d444d870c3 - 51f0161b906011b52c6613376b1ae937670da69322113a246a09f807c62f6921 - 772e9f4c7db33d251d5c6e357199c819e569d130857dc225549b40845ff0890d - aa315286e6ad281ad61182235533c41e806e5a787e0b6d1e7eef3f09d137d2e9 - fe331502606802feac15e514d9b9ea83fee8b6ffef71335479a2e68d84adc6b0 key-threshold: 3 # number of keys required # ignore expiration date, see https://github.com/commercialhaskell/stack/pull/4614 ignore-expiry: nosetup-info-locations: [&quot;http://mirrors.tuna.tsinghua.edu.cn/stackage/stack-setup.yaml&quot;]urls: latest-snapshot: http://mirrors.tuna.tsinghua.edu.cn/stackage/snapshots.jsonsnapshot-location-base: https://mirrors.tuna.tsinghua.edu.cn/stackage/stackage-snapshots/ （3）配置GHC回到终端，运行命令stack --resolver lts-18.27 setup下载lts，成功代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253C:\\Users\\hp&gt;stack --resolver lts-18.27 setupWarning: http://mirrors.tuna.tsinghua.edu.cn/stackage/stack-setup.yaml: Unrecognized field in GHCDownloadInfo: versionPreparing to install GHC to an isolated location.This will not interfere with any system-level installation.Already downloaded.Downloaded 7z.dll.Downloaded 7z.exe.Decompressing ghc-8.10.7.tar.xz...7-Zip 9.20 Copyright (c) 1999-2010 Igor Pavlov 2010-11-18Processing archive: C:\\Users\\hp\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.10.7.tar.xzExtracting ghc-8.10.7.tarEverything is OkSize: 2768711680Compressed: 434126144Extracting ghc-8.10.7.tar...Extracted total of 10342 files from ghc-8.10.7.tarGHC installed to C:\\Users\\hp\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.10.7\\Downloaded msys2-20210604.Already downloaded.Already downloaded.Decompressing msys2-20210604.tar.xz...7-Zip 9.20 Copyright (c) 1999-2010 Igor Pavlov 2010-11-18Processing archive: C:\\Users\\hp\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20210604.tar.xzExtracting msys2-20210604.tarEverything is OkSize: 390021120Compressed: 99822772Extracting msys2-20210604.tar...Extracted total of 17688 files from msys2-20210604.tarCopying skeleton files.These files are for the users to personalise their msys2 experience.They will never be overwritten nor automatically updated.'./.bashrc' -&gt; '/home/hp/.bashrc''./.bash_logout' -&gt; '/home/hp/.bash_logout''./.bash_profile' -&gt; '/home/hp/.bash_profile''./.inputrc' -&gt; '/home/hp/.inputrc''./.profile' -&gt; '/home/hp/.profile'\u001b[0mstack will use a sandboxed GHC it installed\u001b[0m\u001b[0mFor more information on paths, see 'stack path' and 'stack exec env'\u001b[0m\u001b[0mTo use this GHC and packages outside of a project, consider using:\u001b[0m\u001b[0mstack ghc, stack ghci, stack runghc, or stack exec\u001b[0m 测试一下GHC是否安装成功： 1234567C:\\Users\\hp&gt;stack exec -- ghc --versionThe Glorious Glasgow Haskell Compilation System, version 8.10.7C:\\Users\\hp&gt;stack exec -- ghciGHCi, version 8.10.7: https://www.haskell.org/ghc/ :? for helpPrelude&gt; :quitLeaving GHCi. 到此，我们已经有了一个可用的Stack和GHC（芜湖撒花）。 3.配置VSCode3.1 安装插件由于VSCode中的一部分插件版本过老，和新版本的GHC不匹配，因此下载旧版本的GHC做备用，一般来说LTS9不会出现冲突。 在终端执行以下命令进行安装，并检测安装是否成功： 12stack --resolver lts-9.21 setupstack --compiler ghc-8.0.2 exec -- ghc --version 配置完成后，在VSCode扩展中安装以下插件： Haskell ghc-mod Haskell-linter Haskell Syntax Highlighting Haskelly Haskell Code Runner 然后在终端配置插件，分别执行以下命令（这一步所需时间较长，如果一次没配置完，第二次重新打开终端时，需要重新输入chcp 65001） 1234chcp 65001stack --resolver lts-9.21 install ghc-modstack --resolver lts-9.21 install hlintstack --resolver lts-9.21 install intero QuickCheck stack-run 以上这些安装完成后，终端显示如下，不用管那个Warning，但是要记住他那个路径 C:\\Users\\hp\\AppData\\Roaming\\local\\bin，Stack安装的所有扩展应该都在这个路径中，这个路径在配置settings.json时需要用到。 3.2 配置Haskell语言学习环境（1）配置ghc-mod、hlint、Code Runner在VSCode中打开 文件（File）- 首项选（Preferences）- 设置（Settings），点击下图红圈的位置，打开settings.json。 在settings.json文件中加入以下代码，注意在第8行末尾增加逗号，其中Haskell-linter配置的路径就是上面那个提示的路径。 12345678 /* Haskell ghc-mod配置 */ &quot;haskell.ghcMod.executablePath&quot;: &quot;stack&quot;, /* Haskell-linter配置 */ &quot;haskell.hlint.executablePath&quot;: &quot;C:\\\\Users\\\\hp\\\\AppData\\\\Roaming\\\\local\\\\bin\\\\hlint.exe&quot;, /* code-runner配置 */ &quot;code-runner.executorMap&quot;: { &quot;haskell&quot;: &quot;cd $dir &amp;&amp; stack runhaskell $fileName&quot;}, （2）配置Haskell由于使用的是Stack，下列配置项要么添加到全局配置文件 $STACK_ROOT\\config.yaml 中，要么添加到项目配置文件 stack.yaml 中： 12ghc-options: '$everything': -haddock # 一个从带注释的Haskell源代码自动生成文档的工具 4. 尝试使用经过以上操作，haskell的环境基本搭建完毕，写一个简单的Hello World来测试是否成功。在VSCode运行.hs文件基本有以下三种方式： 在终端输入stack runhaskell &quot;.hs文件路径&quot;（最稳定）。 点击右上角的小三角运行按钮。 点击最下面蓝色行用红笔圈出的Run File运行文件。 可以看到成功输出了Hello World。 tips:在实际使用的过程中，想引用import System.Random时却发现系统提示没有这个模块，在查找了无数资料后，终于在这个网站中找到了可行的解决方案，可以尝试在终端输入下面的第一行代码，如果无效则尝试第二行代码： 12stack install randomstack ghci --package random 附：一些个人认为比较有用的Haskell入门资料 Haskell - 条件判断 Haskell系列（三）列表","link":"/2022/03/08/%E9%85%8D%E7%BD%AEHaskell/"}],"tags":[],"categories":[]}